#include <SPI.h>
#include <WiFi101.h>

char ssid[] = "TC-895A4";
char pass[] = "yvQ6s7fx4y4Y";

int status = WL_IDLE_STATUS;

const int pinNext = 15;
const int pinPlayPause = 16;
const int pinPrev = 17;
const int pinLed = 13;
const int pinVibro = 14;

int stateNextBtn;
int lastStateNextBtn = LOW;
int statePlayPauseBtn;
int lastStatePlayPauseBtn = LOW;
int statePrevBtn;
int lastStatePrevBtn = LOW;
int stateLed = LOW;

unsigned long lastTick = 0;
unsigned long debounceDelay = 50;
unsigned long lastTickLed = 0;
unsigned long ledDelay = 24;
unsigned int count = 0;

IPAddress server(192,168,0,2);
const int port = 1337;

//WiFiSSLClient client;
WiFiClient client;

void setup() {
    WiFi.setPins(8, 7, 4, 2);

    pinMode(pinLed, OUTPUT);
    pinMode(pinVibro, OUTPUT);
    pinMode(pinNext, INPUT_PULLUP);
    pinMode(pinPlayPause, INPUT_PULLUP);
    pinMode(pinPrev, INPUT_PULLUP);

    digitalWrite(pinLed, LOW);

    Serial.begin(9600);
    while (!Serial)
    {
        ;
    }

    if (WiFi.status() == WL_NO_SHIELD)
    {
        Serial.println("WiFi shield not present");
        // don't continue:
        while (true)
            ;
    }
    while (status != WL_CONNECTED)
    {
        Serial.print("Attempting to connect to SSID: ");
        Serial.println(ssid);
        // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
        status = WiFi.begin(ssid, pass);

        // wait 5 seconds for connection:
        delay(5000);
    }

    Serial.println("Connected to wifi");
    printWiFiStatus();


    if (client.connect(server, port)) {
        Serial.println("connected to server");
        digitalWrite(pinLed, HIGH);
        delay(50);
        digitalWrite(pinLed, LOW);
        delay(50);
        digitalWrite(pinLed, HIGH);
        delay(50);
        digitalWrite(pinLed, LOW);
    }
}

/*
 * LOOP
 */
void loop() {
    if (!client.connected())
    {
        Serial.println();
        Serial.println("disconnected");
        client.stop();
        while (!client.connect(server, port))
        {
            delay(200);
            Serial.print(".");
            if (count++ > 10)
            {
                Serial.println(WiFi.status());
                count = 0;
            }
        }

//        for(;;)
//            ;
    }

    if (isNextBtnPressed())
    {
        Serial.println("next<");
        client.println("next>");
    }
    if (isPlayPauseBtnPressed())
    {
        Serial.println("playPause<");
        client.println("playPause>");
    }
    if (isPrevBtnPressed())
    {
        Serial.println("prev<");
        client.println("prev>");
    }

    flashLED();

    if (client.available())
    {
        char c = client.read();
        Serial.print(c);
    }

}

/*
  Next
*/
bool isNextBtnPressed()
{
    bool ret = false;
    int reading = digitalRead(pinNext);

    if (reading != lastStateNextBtn)
    {
        lastTick = millis();
    }

    if (((millis() - lastTick) > debounceDelay) && (reading != stateNextBtn))
    {
        stateNextBtn = reading;
        if (stateNextBtn == LOW)
        {
            ret = true;
        }
    }
    lastStateNextBtn = reading;

    return ret;
}

/*
  PlayPause
*/
bool isPlayPauseBtnPressed()
{
    bool ret = false;
    int reading = digitalRead(pinPlayPause);

    if (reading != lastStatePlayPauseBtn)
    {
        lastTick = millis();
    }

    if (((millis() - lastTick) > debounceDelay) && (reading != statePlayPauseBtn))
    {
        statePlayPauseBtn = reading;
        if (statePlayPauseBtn == LOW)
        {
            ret = true;
        }
    }
    lastStatePlayPauseBtn = reading;

    return ret;
}

/*
  Prev
*/
bool isPrevBtnPressed()
{
    bool ret = false;
    int reading = digitalRead(pinPrev);

    if (reading != lastStatePrevBtn)
    {
        lastTick = millis();
    }

    if (((millis() - lastTick) > debounceDelay) && (reading != statePrevBtn))
    {
        statePrevBtn = reading;
        if (statePrevBtn == LOW)
        {
            ret = true;
        }
    }
    lastStatePrevBtn = reading;

    return ret;
}

void printWiFiStatus()
{
    // print the SSID of the network you're attached to:
    Serial.print("SSID: ");
    Serial.println(WiFi.SSID());

    // print your WiFi shield's IP address:
    IPAddress ip = WiFi.localIP();
    Serial.print("IP Address: ");
    Serial.println(ip);

    // print the received signal strength:
    long rssi = WiFi.RSSI();
    Serial.print("signal strength (RSSI):");
    Serial.print(rssi);
    Serial.println(" dBm");
}

/*
  Flash LED
*/
void flashLED()
{
    if (digitalRead(pinNext) && digitalRead(pinPlayPause) && digitalRead(pinPrev))
    {
        digitalWrite(pinLed, LOW);
    }
    else
    {
        digitalWrite(pinLed, HIGH);
        digitalWrite(pinVibro, HIGH);
    }
}
